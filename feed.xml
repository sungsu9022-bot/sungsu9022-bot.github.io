<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sungsu9022-bot.github.io/</id><title>Sungsu Park's Tech Blog</title><subtitle>Java, Kotlin, Spring, MSA, Back-end, Software engineering, Software Architecture, computer science</subtitle> <updated>2022-05-21T17:38:19+09:00</updated> <author> <name>sungsu9022</name> <uri>https://sungsu9022-bot.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://sungsu9022-bot.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://sungsu9022-bot.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 sungsu9022 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[kubernetes-in-action] 11. 쿠버네티스 내부 이해</title><link href="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action11/" rel="alternate" type="text/html" title="[kubernetes-in-action] 11. 쿠버네티스 내부 이해" /><published>2020-09-03T17:34:00+09:00</published> <updated>2020-09-03T17:34:00+09:00</updated> <id>https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action11/</id> <content src="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action11/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="kubernetes" /> <summary> 11. 쿠버네티스 내부 이해 11.1 쿠버네티스 아키텍처 이해 쿠버네티스 클러스터 구성요소 컨트롤 플레인 (워커)노드 컨트롤 플레인 구성요소 클러스터 기능을 제어하고 전체 클러스터가 동작하게 만드는 역할을 한다. etcd 분산 저장 스토리지 API 서버 스케줄러 컨트롤러 매니저 워커 노드에서 실행하는 구성 요소 kubelet 쿠버네티스 서비스 프록시(kube-proxy) 컨테이너 런타임(Docker, rkt 외 기타) 애드온 구성 요소 컨트롤 플레인과 노드에서 실행되는 구성 요소 외에 클러스터에서 추가 기능을 위한 구성 요소 쿠버네티스 DNS 서버 대시보드 인그레스 컨트롤러 힙스터 컨테이너 네트워크 인터페이스(CNI)... </summary> </entry> <entry><title>[kubernetes-in-action] 10. 스테이트풀셋: 복제된 스테이트풀 애플리케이션 배포하기</title><link href="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action10/" rel="alternate" type="text/html" title="[kubernetes-in-action] 10. 스테이트풀셋: 복제된 스테이트풀 애플리케이션 배포하기" /><published>2020-09-02T17:34:00+09:00</published> <updated>2020-09-02T17:34:00+09:00</updated> <id>https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action10/</id> <content src="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action10/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="kubernetes" /> <summary> 10. 스테이트풀셋: 복제된 스테이트풀 애플리케이션 배포하기 볼륨이나 퍼시스턴트볼륨클레임에 바인딩된 퍼시스턴트볼륨을 통해서 데이터베이스를 일반 파드에 실행했었는데, 이 파드들을 스케일아웃하려면 어떻게 할수 있을지 살펴본다. 10.1 스테이트풀 파드 복제하기 스테이트풀 파드를 복제할떄 레플리카셋을 이용한다면 어떨까? 레플리카셋은 하나의 파드 템플릿에서 여러 개의 파드 레플리카를 생성한다. 여러 개개의 파드 레플리카를 복제하는 데 사용하는 파드 템플릿에는 클레임에 관한 참조가 있으므로 각 레플리카가 별도의 퍼시스턴트볼륨클레임을 사용하도록 만들 수가 없음. 10.1.1 개별 스토리지를 갖는 레플리카 여러 개 실행하기 이에 대한 방법은 여러가지가 있겠지만 현실성이 대부분 부족... </summary> </entry> <entry><title>[kubernetes-in-action] 9. 디플로이먼트 : 선언적 애플리케이션 업데이트</title><link href="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action9/" rel="alternate" type="text/html" title="[kubernetes-in-action] 9. 디플로이먼트 : 선언적 애플리케이션 업데이트" /><published>2020-08-30T17:34:00+09:00</published> <updated>2020-08-30T17:34:00+09:00</updated> <id>https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action9/</id> <content src="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action9/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="kubernetes" /> <summary> 9. 디플로이먼트 : 선언적 애플리케이션 업데이트 쿠버네티스 클러스터에서 실행되는 애플리케이션을 업데이트 하는 방법과 쿠버네티스가 어떻게 무중단 업데이트 프로세스로 전환하는 데 도움을 주는지 살펴본다. 9.1 파드에서 실행중인 애플리케이션 업데이트 쿠버네티스에서 실행되는 애플리케이션 기본 구성은 아래와 같다. 여기서 파드에서 실행중인 컨테이너 이미지 버전을 업데이트한다고 할때 어떻게 해야할까? 모든 파드를 업데이트 하는 방법 기존 파드를 모두 삭제한 다음 새 파드를 시작한다. 새로운 파드를 시작하고, 기동하면 기존 파드를 삭제한다. 9.1.1 오래된 파드를 삭제하고 새 파드로 교체 (v1 -&amp;gt; v2로 업데이트한다고 했을때) v1 파드 세트를 관리하는 레플리카... </summary> </entry> <entry><title>[kubernetes-in-action] 8. 애플리케이션에서 파드 메타데이터와 그 외의 리소스에 엑세스하기</title><link href="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action8/" rel="alternate" type="text/html" title="[kubernetes-in-action] 8. 애플리케이션에서 파드 메타데이터와 그 외의 리소스에 엑세스하기" /><published>2020-08-23T17:34:00+09:00</published> <updated>2020-08-23T17:34:00+09:00</updated> <id>https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action8/</id> <content src="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action8/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="kubernetes" /> <summary> 8. 애플리케이션에서 파드 메타데이터와 그 외의 리소스에 엑세스하기 Downward API사용방법과 쿠버네티스 REST API 사용방법, 인증과 서버 검증을 kubectl proxy에 맡기는 방법, 컨테이너 내에서 API 서버에 접근하는 방법, 앰배서더 컨테이너 패턴의 이해, 쿠버네티스 클라이언트 라이브러리 사용방법 등을 살펴본다. 특정 파드와 컨테이너 메타데이터를 컨테이너로 전달하는 방법과 컨테이너 내에서 실행중인 애플리케이션이 쿠버네티스 API 서버와 통신해 클러스터에 배포된 리소스의 정보를 얻는 것이 얼마나 쉬운지, 이런 리소스를 생하거나 수정하는 방법을 살펴보자. 8.1 Downward API로 메타데이터 전달 파드의 IP, 호스트 노드 이름, 파드 자체의 이름과... </summary> </entry> <entry><title>[kubernetes-in-action] 7. 컨피그맵과 시크릿 : 애플리케이션 설정</title><link href="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action7/" rel="alternate" type="text/html" title="[kubernetes-in-action] 7. 컨피그맵과 시크릿 : 애플리케이션 설정" /><published>2020-08-22T17:34:00+09:00</published> <updated>2020-08-22T17:34:00+09:00</updated> <id>https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action7/</id> <content src="https://sungsu9022-bot.github.io/posts/devlog-platform-kubernetes-in-action7/" /> <author> <name>sungsu park</name> </author> <category term="DevLog" /> <category term="kubernetes" /> <summary> 7. 컨피그맵과 시크릿 : 애플리케이션 설정 빌드된 애플리케이션 자체에 포함되지 말아야 하는 설정(배포된 인스턴스별로 다른 세팅, 외부 시스템 엑세스를 위한 자격증명 등)이 필요하다. 쿠버네티스는 이런 앱을 실행할때 설정 옵션을 전달할수 있는 방법을 제공한다. 7.1 컨테이너화된 애플리케이션 설정 필요한 모든 설정을 앱에 포함하는 경우를 제외하면 일반적으로 명령줄 인수를 통해 앱에 필요한 설정을 넘겨주면서 앱을 실행시킨다. 옵션 목록이 커지면 이 옵션들을 파일에 저장하고 사용하기도 한다. 아니면 서버의 환경변수를 통해 전달하기도 한다. 도커 컨테이너를 기반으로 한다고 했을때 내부에 있는 설정 파일을 사용하는것은 약간 까다롭다.(컨테이너 이미지 안에 넣는것은 소스코드에 하드코딩하... </summary> </entry> </feed>
